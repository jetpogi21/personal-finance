//Generated by CreateModelForm
import React, { Dispatch, SetStateAction, useMemo } from "react";
import {
  Alert,
  Box,
  Button,
  Container,
  FormControl,
  Paper,
  Stack,
  Typography,
} from "@mui/material";
import { Field, FieldArray, Formik } from "formik";
import Link from "next/link";
import {
  BudgetFormModel,
  BudgetModel,
} from "../../interfaces/BudgetInterfaces";
import { TRequiredList } from "../../hooks/budget/useBudgetForm";
import BudgetSchema from "../../schema/budget/BudgetSchema";
import {
  ConvertBasicModelToControlChoice,
  ConvertNumberArrToControlChoice,
  formatCurrency,
  parseAsValidFloat,
} from "../../utils/utilities";
import { MUIText, MUIRadio, MUIAutocomplete } from "../../utils/formik";
import BudgetItemForm from "./BudgetItemForm";
import { RowStack } from "../MUI/Stack";
import {
  countFridaysInMonth,
  getIncomeExpenseAndRowTotals,
  getWeekdayCount,
} from "../../utils/budget";

type BudgetFormProps = {
  budget: BudgetModel | null;
  formInitialValues: BudgetFormModel;
  formHandlers: {
    handleSubmit: (values: BudgetFormModel) => Promise<void>;
    handleDelete: () => void;
    handleCancelClick: () => void;
    setDeletedBudgetItems: Dispatch<SetStateAction<number[]>>;
  };
  requiredListObject: TRequiredList;
  handleOpenDialog: () => void;
  formError: string | null;
  importTemplateClick: (month: string, year: string) => Promise<void>;
};

const BudgetForm: React.FC<BudgetFormProps> = ({
  budget,
  formInitialValues,
  formHandlers,
  requiredListObject,
  handleOpenDialog,
  formError,
  importTemplateClick,
}) => {
  return (
    <Formik
      enableReinitialize={true}
      initialValues={formInitialValues}
      validateOnBlur={false}
      validateOnChange={false}
      validationSchema={BudgetSchema}
      onSubmit={formHandlers.handleSubmit}
    >
      {(formik) => {
        //Calculate the multiplier for weekly and daily categories
        const workDayMultiplier = useMemo(
          () =>
            getWeekdayCount(
              formik.values.budget_month,
              formik.values.budget_year
            ),
          [formik.values.budget_month, formik.values.budget_year]
        );

        const weeklyMultiplier = useMemo(
          () =>
            countFridaysInMonth(
              formik.values.budget_month,
              formik.values.budget_year
            ),
          [formik.values.budget_month, formik.values.budget_year]
        );

        const { totalExpectedIncome, totalBudgetedExpense, rowTotals } =
          getIncomeExpenseAndRowTotals(
            formik.values.BudgetItems,
            workDayMultiplier,
            weeklyMultiplier
          );

        return (
          <Stack
            component="form"
            noValidate
            autoComplete="off"
            direction="column"
            onSubmit={formik.handleSubmit}
            spacing={2}
            p={2}
            sx={{
              "& .MuiFormHelperText-root": {
                fontSize: "0.70rem",
                ml: 1,
              },
              "& .MuiInputLabel-shrink": {
                fontSize: "1rem",
                bgcolor: "white",
                width: "auto",
                pr: 0.8,
                transform: "translate(14px, -11px) scale(0.75)",
              },
            }}
          >
            <Stack direction="column" gap={4}>
              {formError && <Alert severity="error">{formError}</Alert>}
              <Stack direction="column" gap={2}>
                {/* Generated by GenerateModelFormControls */}
                <RowStack p={2} alignItems={"stretch"}>
                  {/* Generated by GenerateIndividualFormControl */}
                  {requiredListObject.months && (
                    <Box flex={"0 0 150px"}>
                      <MUIAutocomplete
                        label="Budget Month"
                        name="budget_month"
                        items={requiredListObject.months}
                        freeSolo={false}
                        multiple={false}
                      />
                    </Box>
                  )}
                  {/* Generated by GenerateIndividualFormControl */}
                  <Box flex={"0 0 150px"}>
                    <MUIText
                      label="Budget Year"
                      name="budget_year"
                      type="number"
                    />
                  </Box>

                  <Button
                    variant="outlined"
                    color="primary"
                    size="small"
                    sx={{ whiteSpace: "nowrap", minWidth: "auto" }}
                    onClick={async (e) => {
                      e.preventDefault();
                      const month = formik.values.budget_month;
                      const year = formik.values.budget_year;
                      await importTemplateClick(month, year);
                    }}
                  >
                    Import from Template
                  </Button>
                  <RowStack ml="auto" alignSelf={"center"}>
                    <RowStack>
                      <Typography component={"span"} fontWeight={"bold"}>
                        Income:
                      </Typography>
                      <Typography color="success.main">
                        {formatCurrency(totalExpectedIncome)}
                      </Typography>
                    </RowStack>
                    <RowStack>
                      <Typography component={"span"} fontWeight={"bold"}>
                        Expense:
                      </Typography>
                      <Typography color="warning.main">
                        {formatCurrency(totalBudgetedExpense)}
                      </Typography>
                    </RowStack>
                    <RowStack>
                      <Typography component={"span"} fontWeight={"bold"}>
                        Net Income:
                      </Typography>
                      <Typography color="info.main">
                        {formatCurrency(
                          totalExpectedIncome - totalBudgetedExpense
                        )}
                      </Typography>
                    </RowStack>
                  </RowStack>
                </RowStack>
                {
                  <FieldArray name="BudgetItems">
                    {(FormikHelper) => (
                      <BudgetItemForm
                        formik={formik}
                        arrayHelper={FormikHelper}
                        budget={budget}
                        requiredListObject={requiredListObject}
                        formHandlers={formHandlers}
                        rowTotals={rowTotals}
                      />
                    )}
                  </FieldArray>
                }
              </Stack>
            </Stack>
            <Stack direction="row" gap={1}>
              <Button
                type="submit"
                size="small"
                color="primary"
                variant="contained"
                sx={{ width: 50 }}
              >
                Submit
              </Button>
              {Boolean(budget) && (
                <Button
                  size="small"
                  color="error"
                  variant="contained"
                  sx={{ width: 50 }}
                  onClick={handleOpenDialog}
                >
                  Delete
                </Button>
              )}

              <Button type="submit" size="small" sx={{ width: 50 }}>
                <Link
                  href="/"
                  style={{ textDecoration: "none", color: "inherit" }}
                >
                  Cancel
                </Link>
              </Button>
            </Stack>
          </Stack>
        );
      }}
    </Formik>
  );
};

export default BudgetForm;
