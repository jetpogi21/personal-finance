import { SelectChangeEvent } from "@mui/material";
import { FormikProps } from "formik";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import {
  AccountTitleURLQuery,
  AccountTitleFilterFormDefaultValue,
  AccountTitleModel,
} from "../../interfaces/AccountTitleInterfaces";
import {
  BasicModel,
  SortPair,
  NameCaption,
  SortOptions,
  SortOptionsAsString,
} from "../../interfaces/GeneralInterfaces";
import axiosClient from "../../utils/api";
import {
  getFilterValueFromURL,
  getParamsObject,
  getSortedBy,
  modifySort,
  modifyLimit,
  getFirstItem,
  getAxiosParams,
  modifySortAsString,
} from "../../utils/utilities";
import usePromiseAll from "../usePromiseAll";
import { useToggle } from "../useToggle";
const useAccountTitles = (query: Partial<AccountTitleURLQuery>) => {
  const router = useRouter();
  const normalBalances: BasicModel[] = [
    { id: "Debit", name: "Debit" },
    { id: "Credit", name: "Credit" },
  ];
  const {
    data,
    loading: isRequiredListLoading,
    error: promiseAllError,
  } = usePromiseAll({});

  promiseAllError && console.log(promiseAllError);
  const requiredListObject: TRequiredList = {
    normalBalances,
    isRequiredListLoading,
  };
  const filterFormDefaultValue: AccountTitleFilterFormDefaultValue = {
    q: "",
    nb: "all",
  };
  //Reshape the initial values of the filter form depending on the URL queries
  const filterFormInitialValue: AccountTitleFilterFormDefaultValue =
    getFilterValueFromURL(query, filterFormDefaultValue);
  //This will supply the name key for each array of objects
  const handleFilterFormSubmit = (
    values: AccountTitleFilterFormDefaultValue
  ) => {
    const params = getParamsObject(
      values,
      filterFormDefaultValue
    ) as Partial<AccountTitleURLQuery>;
    router.push({ pathname: router.pathname, query: params });
  };

  const handleFilterFormReset = (formik: FormikProps<any>) => {
    formik.resetForm({
      values: filterFormDefaultValue,
    });
    router.push({ pathname: router.pathname });
  };
  const formikObject: TFormikFilterFormObject = {
    filterFormDefaultValue,
    filterFormInitialValue,
    handleFilterFormSubmit,
    handleFilterFormReset,
  };

  //Generated by GenerateClientModelSortLimit

  //Generated by GenerateClientSortOptions
  const sortedBy = getSortedBy(query, "account_title");
  const sortOptions: SortOptionsAsString = {
    sortedBy,
    sortObject: {
      account_title: {
        caption: "Account Title",
        asc: "account_title",
        desc: "-account_title",
      },
      normal_balance: {
        caption: "Normal Balance",
        asc: "normal_balance",
        desc: "-normal_balance",
      },
    },
  };

  const handleAccountTitleSort = (name: string) =>
    modifySortAsString(name, sortOptions, router, query);

  const handleAccountTitleLimitChange = (event: SelectChangeEvent<string>) =>
    modifyLimit(event.target.value, router, query);

  const sortAndLimitObject = {
    limit: getFirstItem(query.limit, "20"),
    sortOptions,
    handleAccountTitleSort,
    handleAccountTitleLimitChange,
  };
  const [accountTitles, setAccountTitles] = useState<AccountTitleModel[]>([]);
  const [gridLoading, setGridLoading] = useState(true);
  const [recordCount, setRecordCount] = useState(0);

  const fetchAccountTitles = async () => {
    setGridLoading(true);

    try {
      const { data } = await axiosClient.get("/account-titles/", {
        params: {
          ...getAxiosParams(query, filterFormDefaultValue),
          page: query.page,
          limit: query.limit,
          sort: query.sort,
        },
      });

      const rows = data.data.rows || data.data;
      const count = data.data.count || data.totalRecordCount;
      setAccountTitles(rows || []);
      setRecordCount(count || 0);
    } catch (error) {
      console.error(error);
    } finally {
      setGridLoading(false);
    }
  };

  useEffect(() => {
    fetchAccountTitles();
  }, [query]);

  const mainListObject = { accountTitles, gridLoading, recordCount };
  const { toggle: isFilterFormShown, handleToggle: toggleFilterForm } =
    useToggle();
  const toggleObject = { isFilterFormShown, toggleFilterForm };
  const breadCrumbLinks = [
    { href: "/account-titles", caption: "Account Title List" },
  ];
  return {
    requiredListObject,
    sortAndLimitObject,
    mainListObject,
    formikObject,
    toggleObject,
    breadCrumbLinks,
  };
};
export type TMainListObject = {
  accountTitles: AccountTitleModel[];
  gridLoading: boolean;
  recordCount: number;
};
export type TFormikFilterFormObject = {
  filterFormDefaultValue: AccountTitleFilterFormDefaultValue;
  filterFormInitialValue: AccountTitleFilterFormDefaultValue;
  handleFilterFormSubmit: (values: AccountTitleFilterFormDefaultValue) => void;
  handleFilterFormReset: (formik: FormikProps<any>) => void;
};
export type TAccountTitlesHook = ReturnType<typeof useAccountTitles>;
export type TRequiredList = {
  normalBalances: BasicModel[];
  isRequiredListLoading: boolean;
};
export default useAccountTitles;
