//Generated by Create_useModelFormHook
import { useRouter } from "next/router";
import { useGlobalContext } from "../../contexts/Global";
import { BasicModel, BreadcrumbLink } from "../../interfaces/GeneralInterfaces";
import usePromiseAll from "../usePromiseAll";
import { useEffect, useState } from "react";
import {
  BudgetFormModel,
  BudgetFormModelForSubmission,
  BudgetModel,
} from "../../interfaces/BudgetInterfaces";
import axiosClient from "../../utils/api";
import {
  convertDateToYYYYMMDD,
  getCurrentYear,
  getCurrentMonthNumber,
} from "../../utils/utilities";
import { monthsModel } from "../../utils/constants";
import { format } from "date-fns";

const useBudgetForm = (id: string) => {
  const router = useRouter();

  //From global context
  const { openSnackbar, setPageLoading } = useGlobalContext();

  //Generated by CopyAllEnumConstantDeclaration
  const months = monthsModel;
  //Generated by CopyEnumConstantDeclaration
  const categories: BasicModel[] = [
    { id: "Workday", name: "Workday" },
    { id: "Monthly", name: "Monthly" },
    { id: "Weekly", name: "Weekly" },
  ];
  //Generated by CopyEnumConstantDeclaration
  const types: BasicModel[] = [
    { id: "Income", name: "Income" },
    { id: "Expense", name: "Expense" },
  ];
  //Generated by CopyUsePromiseAllOfThisModel

  const {
    data,
    loading: isRequiredListLoading,
    error: promiseAllError,
  } = usePromiseAll({});

  promiseAllError && console.log(promiseAllError);
  const requiredListObject: TRequiredList = {
    categories,
    types,
    months,
    isRequiredListLoading,
  }; //Generated by Build_requiredList

  //Generated by Create_fetchModel
  const [budget, setBudget] = useState<BudgetModel | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const mainListObject: TMainListObject = { budget, loading, error };

  const fetchBudget = async () => {
    setLoading(true);
    try {
      const { data } = await axiosClient.get(`budgets/${id}`);
      if (data.status === "success") {
        setBudget(data.data);
        setLoading(false);
      }
    } catch (error) {
      setError(error as string);
    }
  };

  useEffect(() => {
    if (id !== "new") {
      fetchBudget();
    }
  }, [id]);

  //Generated by Create_formInitialValues
  const formInitialValues: BudgetFormModel = {
    budget_year: getCurrentYear().toString(), //Generated by CreateFieldFormInitialValues
    budget_month: getCurrentMonthNumber().toString(), //Generated by CreateFieldFormInitialValues
    id: "", //Generated by CreateFieldFormInitialValues
    BudgetItems: [],
  };
  if (budget) {
    for (const key in formInitialValues) {
      if (budget.hasOwnProperty(key) && formInitialValues.hasOwnProperty(key)) {
        //@ts-ignore
        //prettier-ignore
        formInitialValues[key] = budget[key] === null ? "" : budget[key];
      }
    }

    //Edit the id and name to match the id and name of the list
    formInitialValues.BudgetItems = budget.BudgetItems.map(
      (
        item //Generated by GetFromRecordToFormInitAssignment
      ) => ({
        id: item.id.toString(),
        budget_id: item.budget_id.toString(),
        category: item.category,
        type: item.type,
        amount: item.amount,
        description: item.description,
        checked: false,
        touched: false,
      })
    );
  }
  //Generated by PushAtLeastOneRow
  formInitialValues.BudgetItems.push({
    id: "",
    budget_id: budget ? budget.id.toString() : "",
    category: "Workday",
    type: "Income",
    amount: "0.00",
    description: "",
    checked: false,
    touched: false,
  });
  const [deletedBudgetItems, setDeletedBudgetItems] = useState<number[]>([]);

  //Generated by CreateModelForm_breadcrumbLinks

  const breadCrumbCaption = budget
    ? `${format(new Date(0, budget.budget_month - 1), "LLLL")} ${
        budget.budget_year
      }`
    : "New";
  const breadcrumbLinks: BreadcrumbLink[] = [
    { href: "/budgets", caption: "Budget List" },
    {
      href: `/budgets/${id}`,
      caption: breadCrumbCaption,
    },
  ];

  const [formError, setFormError] = useState<string | null>(null);

  //Generated by Create_handleSubmit
  const handleSubmit = async (values: BudgetFormModel) => {
    setPageLoading(true);

    //Method,URL and message depending on whether the method is add or edit.
    let url: string, method: string, message: string;

    if (!budget) {
      url = `/budgets/`;
      method = "post";
      message = "added";
    } else {
      url = `/budgets/${budget.id}`;
      method = "put";
      message = "updated";
    }

    const newValues = JSON.parse(
      JSON.stringify(values)
    ) as BudgetFormModelForSubmission;

    //Generated by Create_handleSubmit

    newValues.deletedBudgetItems = deletedBudgetItems;
    newValues.BudgetItems = newValues.BudgetItems.filter(
      (item) => item.touched
    );

    //dont forget to add any deleted Ids of the children object.
    try {
      const { data } = await axiosClient({
        method,
        url,
        data: newValues,
      });

      //if error then store the top level error
      setFormError(data.status === "error" ? data.error : null);
      if (data.status === "success") {
        openSnackbar(`Budget ${message} successfully..`);
        //TO DO: go back to the previous page. push the previous page.
        router.back();
      }
    } catch (error) {
      console.log({ error });
    } finally {
      setPageLoading(false);
    }
  };

  const importTemplateClick = async (month: string, year: string) => {
    try {
      const { data } = await axiosClient({
        method: "POST",
        url: "/budgets/insert-template-to-budget/",
        data: { month, year },
      });

      console.log({ data });
      //if error then store the top level error
      setFormError(data.status === "error" ? data.error : null);
      if (data.status === "success") {
        const url = `/budgets/${data.data.budgetId}`;
        if (router.asPath !== url) {
          router.push(url);
        } else {
          await fetchBudget();
        }
      }
    } catch (error) {
      console.log({ error });
    } finally {
      setPageLoading(false);
    }
  };

  //Generated by Create_handleDelete
  const handleDelete = () => {
    if (budget) {
      axiosClient
        .delete(`/budgets/${budget.id}`)
        .then(({ data }) => {
          setFormError(data.status === "error" ? data.error : null);
          if (data.status === "success") {
            openSnackbar(`Budget deleted successfully..`);
            router.back();
          }
        })
        .finally(() => {
          setPageLoading(false);
          handleCloseDialog();
        });
    }
  };

  const handleCancelClick = () => {
    router.back();
  };

  const formHandlers = {
    handleSubmit,
    handleDelete,
    handleCancelClick,
    setDeletedBudgetItems,
  };

  const [openDialog, setOpenDialog] = useState(false);
  const handleCloseDialog = () => setOpenDialog(false);
  const handleOpenDialog = () => setOpenDialog(true);

  const dialogObject = { openDialog, handleCloseDialog, handleOpenDialog };

  return {
    requiredListObject,
    mainListObject,
    formInitialValues,
    breadcrumbLinks,
    dialogObject,
    formHandlers,
    formError,
    importTemplateClick,
  };
};

export type TMainListObject = {
  budget: BudgetModel | null;
  loading: boolean;
  error: string | null;
};

export type TBudgetFormHook = ReturnType<typeof useBudgetForm>;

//Generated by GenerateTRequiredListDeclaration
export type TRequiredList = {
  months: BasicModel[];
  categories: BasicModel[];
  types: BasicModel[];
  isRequiredListLoading: boolean;
};

export default useBudgetForm;
