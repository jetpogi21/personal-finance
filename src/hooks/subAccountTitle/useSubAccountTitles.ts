import { SelectChangeEvent } from "@mui/material";
import { FormikProps } from "formik";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import {
  SubAccountTitleURLQuery,
  SubAccountTitleFilterFormDefaultValue,
  SubAccountTitleModel,
} from "../../interfaces/SubAccountTitleInterfaces";
import {
  BasicModel,
  SortPair,
  NameCaption,
  SortOptions,
  SortOptionsAsString,
} from "../../interfaces/GeneralInterfaces";
import axiosClient from "../../utils/api";
import {
  getFilterValueFromURL,
  getParamsObject,
  getSortedBy,
  modifySort,
  modifyLimit,
  getFirstItem,
  getAxiosParams,
  modifySortAsString,
} from "../../utils/utilities";
import usePromiseAll from "../usePromiseAll";
import { useToggle } from "../useToggle";
import { AccountTitleModel } from "../../interfaces/AccountTitleInterfaces";
const useSubAccountTitles = (query: Partial<SubAccountTitleURLQuery>) => {
  const router = useRouter();

  const {
    data,
    loading: isRequiredListLoading,
    error: promiseAllError,
  } = usePromiseAll({ accountTitles: "/account-titles" });

  const assertedAccountTitles = data.accountTitles as AccountTitleModel[];
  const accountTitles = assertedAccountTitles?.map((item) => ({
    id: item.id,
    name: item.account_title,
  })) as BasicModel[];

  promiseAllError && console.log(promiseAllError);
  const requiredListObject: TRequiredList = {
    accountTitles,
    isRequiredListLoading,
  };
  const filterFormDefaultValue: SubAccountTitleFilterFormDefaultValue = {
    account_title_id: "all",
    q: "",
  };
  //Reshape the initial values of the filter form depending on the URL queries
  const filterFormInitialValue: SubAccountTitleFilterFormDefaultValue =
    getFilterValueFromURL(query, filterFormDefaultValue);
  //This will supply the name key for each array of objects
  const handleFilterFormSubmit = (
    values: SubAccountTitleFilterFormDefaultValue
  ) => {
    const params = getParamsObject(
      values,
      filterFormDefaultValue
    ) as Partial<SubAccountTitleURLQuery>;
    router.push({ pathname: router.pathname, query: params });
  };

  const handleFilterFormReset = (formik: FormikProps<any>) => {
    formik.resetForm({
      values: filterFormDefaultValue,
    });
    router.push({ pathname: router.pathname });
  };
  const formikObject: TFormikFilterFormObject = {
    filterFormDefaultValue,
    filterFormInitialValue,
    handleFilterFormSubmit,
    handleFilterFormReset,
  };
  //Generated by GenerateClientModelSortLimit

  //Generated by GenerateClientSortOptions
  const sortedBy = getSortedBy(query, "sub_account_title");
  const sortOptions: SortOptionsAsString = {
    sortedBy,
    sortObject: {
      account_title_id: {
        caption: "Account Title",
        asc: "account_title_id",
        desc: "-account_title_id",
      },
      sub_account_title: {
        caption: "Sub Account Title",
        asc: "sub_account_title",
        desc: "-sub_account_title",
      },
    },
  };

  const handleSubAccountTitleSort = (name: string) =>
    modifySortAsString(name, sortOptions, router, query);

  const handleSubAccountTitleLimitChange = (event: SelectChangeEvent<string>) =>
    modifyLimit(event.target.value, router, query);

  const sortAndLimitObject = {
    limit: getFirstItem(query.limit, "20"),
    sortOptions,
    handleSubAccountTitleSort,
    handleSubAccountTitleLimitChange,
  };

  const [subAccountTitles, setSubAccountTitles] = useState<
    SubAccountTitleModel[]
  >([]);
  const [gridLoading, setGridLoading] = useState(true);
  const [recordCount, setRecordCount] = useState(0);

  const fetchSubAccountTitles = async () => {
    setGridLoading(true);

    try {
      const { data } = await axiosClient.get("/sub-account-titles/", {
        params: {
          ...getAxiosParams(query, filterFormDefaultValue),
          page: query.page,
          limit: query.limit,
          sort: query.sort,
        },
      });

      const rows = data.data.rows || data.data;
      const count = data.data.count || data.totalRecordCount;
      setSubAccountTitles(rows || []);
      setRecordCount(count || 0);
    } catch (error) {
      console.error(error);
    } finally {
      setGridLoading(false);
    }
  };

  useEffect(() => {
    fetchSubAccountTitles();
  }, [query]);

  const mainListObject = { subAccountTitles, gridLoading, recordCount };
  const { toggle: isFilterFormShown, handleToggle: toggleFilterForm } =
    useToggle();
  const toggleObject = { isFilterFormShown, toggleFilterForm };
  const breadCrumbLinks = [
    { href: "/sub-account-titles", caption: "Sub Account Title List" },
  ];
  return {
    requiredListObject,
    sortAndLimitObject,
    mainListObject,
    formikObject,
    toggleObject,
    breadCrumbLinks,
  };
};
export type TMainListObject = {
  subAccountTitles: SubAccountTitleModel[];
  gridLoading: boolean;
  recordCount: number;
};
export type TFormikFilterFormObject = {
  filterFormDefaultValue: SubAccountTitleFilterFormDefaultValue;
  filterFormInitialValue: SubAccountTitleFilterFormDefaultValue;
  handleFilterFormSubmit: (
    values: SubAccountTitleFilterFormDefaultValue
  ) => void;
  handleFilterFormReset: (formik: FormikProps<any>) => void;
};
export type TSubAccountTitlesHook = ReturnType<typeof useSubAccountTitles>;
export type TRequiredList = {
  accountTitles: BasicModel[];
  isRequiredListLoading: boolean;
};
export default useSubAccountTitles;
